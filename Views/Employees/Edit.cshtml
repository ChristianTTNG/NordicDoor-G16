@model NordicDoorTestingrep.Models.EmployeeViewModel

@{
    ViewData["Title"] = "Edit";
}

<h1>Endre</h1>

<h4>Ansatt</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="EmployeeId" />
            <div class="form-group">
                <label asp-for="EmpName" class="control-label"></label>
                <input asp-for="EmpName" class="form-control" />
                <span asp-validation-for="EmpName" class="text-danger"></span>
            </div>

            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsAdmin" /> @Html.DisplayNameFor(model => model.IsAdmin)
                </label>
            </div>

            <div class="form-group">
                <label asp-for="Teams" class="control-label"></label>
                <span asp-validation-for="Teams" class="text-danger"></span>
                
                <div class="d-flex flex-column">
                    @for (int i = 0; i < Model.Teams.Count(); i++)
                    {
                        <div style="float:left">
                            @Html.EditorFor(m => Model.Teams[i].Checked, new { htmlAttributes = new { @style="width: auto" } })
                            @Html.DisplayFor(m => Model.Teams[i].Name)
                        
                            @Html.HiddenFor(m => Model.Teams[i].Name)
                            @Html.HiddenFor(m => Model.Teams[i].Id)
                        </div>
                    }
                </div>
            </div>

            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Tilbake</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
